/// <reference types="qs" />
import { RequestHandler, Request, Response } from 'express';
import { EnvoyEntryEventRequest, EnvoyEventRequest, EnvoyInviteEventRequest, EnvoyLocationEventRequest, EnvoyMigrationRouteRequest, EnvoyNotificationEventRequest, EnvoyOptionsRouteRequest, EnvoyRemoteValueRouteRequest, EnvoySelectedValuesRouteRequest, EnvoyTakeoverEventRequest, EnvoyValidationRouteRequest } from './EnvoyRequest';
import EnvoyResponse, { EnvoyOptionsRouteResponse, EnvoyRemoteValueRouteResponse, EnvoySelectedValuesRouteResponse, EnvoyValidationRouteResponse } from './EnvoyResponse';
declare type SomeObject = Record<string, unknown>;
declare type Result = Promise<void> | void;
/**
 * Handle an entry event, such as `entry_sign_in`.
 * @category Handler
 */
export declare type EntryEventHandler<Config = SomeObject, Additions = SomeObject> = (req: EnvoyEntryEventRequest<Config> & Additions, res: EnvoyResponse) => Result;
/**
 * Handle an invite event, such as `invite_created`.
 * @category Handler
 */
export declare type InviteEventHandler<Config = SomeObject, Additions = SomeObject> = (req: EnvoyInviteEventRequest<Config> & Additions, res: EnvoyResponse) => Result;
/**
 * Handle an location event, such as `location_capacity_updated`.
 * @category Handler
 */
export declare type LocationEventHandler<Config = SomeObject, Additions = SomeObject> = (req: EnvoyLocationEventRequest<Config> & Additions, res: EnvoyResponse) => Result;
/**
 * Handle an notification event.
 * @category Handler
 */
export declare type NotificationEventHandler<Config = SomeObject, Additions = SomeObject> = (req: EnvoyNotificationEventRequest<Config> & Additions, res: EnvoyResponse) => Result;
/**
 * Handle a takeover event.
 * @category Handler
 */
export declare type TakeoverEventHandler<Config = SomeObject, Additions = SomeObject> = (req: EnvoyTakeoverEventRequest<Config> & Additions, res: EnvoyResponse) => Result;
/**
 * Handle a `plugin_uninstalled` event for cleaning up.
 * @category Handler
 */
export declare type PluginUninstalledEventHandler<Config = SomeObject, Additions = SomeObject> = (req: EnvoyEventRequest<'plugin_uninstalled', never, Config> & Additions, res: EnvoyResponse) => Result;
/**
 * Handle a "migration" route.
 * @category Handler
 */
export declare type MigrationRouteHandler<OldConfig = SomeObject, NewConfig = SomeObject, Additions = SomeObject> = (req: EnvoyMigrationRouteRequest<OldConfig> & Additions, res: EnvoyResponse<NewConfig>) => Result;
/**
 * Handle an "options" route.
 * @category Handler
 */
export declare type OptionsRouteHandler<Config = SomeObject, Additions = SomeObject> = (req: EnvoyOptionsRouteRequest<Config> & Additions, res: EnvoyOptionsRouteResponse) => Result;
/**
 * Handle a "remote value" route.
 * @category Handler
 */
export declare type RemoteValueRouteHandler<Config = SomeObject, Additions = SomeObject> = (req: EnvoyRemoteValueRouteRequest<Config> & Additions, res: EnvoyRemoteValueRouteResponse) => Result;
/**
 * Handle a "selected values" route.
 * @category Handler
 */
export declare type SelectedValuesRouteHandler<Config = SomeObject, Additions = SomeObject> = (req: EnvoySelectedValuesRouteRequest<Config> & Additions, res: EnvoySelectedValuesRouteResponse) => Result;
/**
 * Handle a "validation" route.
 * @category Handler
 */
export declare type ValidationRouteHandler<Config = SomeObject, Payload = SomeObject, Additions = SomeObject> = (req: EnvoyValidationRouteRequest<Payload, Config> & Additions, res: EnvoyValidationRouteResponse<Config>) => Result;
/**
 * Wraps any express.js-based handlers
 * to catch Promise-based errors.
 *
 * @category Handler
 */
export declare function asyncHandler<Req extends Request, Res extends Response>(handler: (req: Req, res: Res) => Result): RequestHandler;
/**
 * Handler for entry events.
 *
 * @category Handler
 */
export declare function entryEventHandler<Config = SomeObject, Additions = SomeObject>(handler: EntryEventHandler<Config, Additions>): RequestHandler<import("express-serve-static-core").ParamsDictionary, any, any, import("qs").ParsedQs, Record<string, any>>;
/**
 * Handler for invite events.
 *
 * @category Handler
 */
export declare function inviteEventHandler<Config = SomeObject, Additions = SomeObject>(handler: InviteEventHandler<Config, Additions>): RequestHandler<import("express-serve-static-core").ParamsDictionary, any, any, import("qs").ParsedQs, Record<string, any>>;
/**
 * Handler for location events.
 *
 * @category Handler
 */
export declare function locationEventHandler<Config = SomeObject, Additions = SomeObject>(handler: LocationEventHandler<Config, Additions>): RequestHandler<import("express-serve-static-core").ParamsDictionary, any, any, import("qs").ParsedQs, Record<string, any>>;
/**
 * Handler for a migration route.
 *
 * @category Handler
 */
export declare function migrationRouteHandler<OldConfig, NewConfig, Additions = SomeObject>(handler: MigrationRouteHandler<OldConfig, NewConfig, Additions>): RequestHandler<import("express-serve-static-core").ParamsDictionary, any, any, import("qs").ParsedQs, Record<string, any>>;
/**
 * Handler for notification events.
 *
 * @category Handler
 */
export declare function notificationEventHandler<Config = SomeObject, Additions = SomeObject>(handler: NotificationEventHandler<Config, Additions>): RequestHandler<import("express-serve-static-core").ParamsDictionary, any, any, import("qs").ParsedQs, Record<string, any>>;
/**
 * Handler for takeover events.
 *
 * @category Handler
 */
export declare function takeoverEventHandler<Config = SomeObject, Additions = SomeObject>(handler: TakeoverEventHandler<Config, Additions>): RequestHandler<import("express-serve-static-core").ParamsDictionary, any, any, import("qs").ParsedQs, Record<string, any>>;
/**
 * Handler for options URL routes.
 *
 * @category Handler
 */
export declare function optionsRouteHandler<Config = SomeObject, Additions = SomeObject>(handler: OptionsRouteHandler<Config, Additions>): RequestHandler<import("express-serve-static-core").ParamsDictionary, any, any, import("qs").ParsedQs, Record<string, any>>;
/**
 * Handler for `plugin_uninstalled` events.
 *
 * @category Handler
 */
export declare function pluginUninstalledEventHandler<Config = SomeObject, Additions = SomeObject>(handler: PluginUninstalledEventHandler<Config, Additions>): RequestHandler<import("express-serve-static-core").ParamsDictionary, any, any, import("qs").ParsedQs, Record<string, any>>;
/**
 * Handler for remote value URL routes.
 *
 * @category Handler
 */
export declare function remoteValueRouteHandler<Config = SomeObject, Additions = SomeObject>(handler: RemoteValueRouteHandler<Config, Additions>): RequestHandler<import("express-serve-static-core").ParamsDictionary, any, any, import("qs").ParsedQs, Record<string, any>>;
/**
 * Handler for selected values URL routes.
 *
 * @category Handler
 */
export declare function selectedValuesRouteHandler<Config = SomeObject, Additions = SomeObject>(handler: SelectedValuesRouteHandler<Config, Additions>): RequestHandler<import("express-serve-static-core").ParamsDictionary, any, any, import("qs").ParsedQs, Record<string, any>>;
/**
 * Handler for validation URL routes.
 *
 * @category Handler
 */
export declare function validationRouteHandler<Config = SomeObject, Payload = SomeObject, Additions = SomeObject>(handler: ValidationRouteHandler<Config, Payload, Additions>): RequestHandler<import("express-serve-static-core").ParamsDictionary, any, any, import("qs").ParsedQs, Record<string, any>>;
export {};
//# sourceMappingURL=handlers.d.ts.map