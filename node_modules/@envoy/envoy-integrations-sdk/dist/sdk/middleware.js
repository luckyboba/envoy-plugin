"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.errorMiddleware = exports.envoyMiddleware = void 0;
var body_parser_1 = __importDefault(require("body-parser"));
var HttpStatus_1 = __importDefault(require("../internal/HttpStatus"));
var EnvoySignatureVerifier_1 = __importDefault(require("../util/EnvoySignatureVerifier"));
var EnvoyRequest_1 = require("./EnvoyRequest");
var EnvoyPluginSDK_1 = __importDefault(require("./EnvoyPluginSDK"));
var EnvoyPluginAPI_1 = __importDefault(require("./EnvoyPluginAPI"));
/**
 * Sets up an {@link EnvoyPluginSDK} object in the path `req.envoy`.
 * Modifies the `res` object to include Envoy's helpers, per {@link EnvoyResponse}.
 *
 * Also verifies that the request is coming from Envoy,
 * as well as managing the plugin access token lifecycle.
 *
 * @category Middleware
 */
function envoyMiddleware(options) {
    var _this = this;
    var signatureVerifier = new EnvoySignatureVerifier_1.default(options);
    var verify = function (req, res, rawBody) {
        req[EnvoyRequest_1.VERIFIED] = signatureVerifier.verify(req, rawBody);
    };
    var json = body_parser_1.default.json({ verify: verify });
    var accessToken = null;
    var threshold = 0;
    return function (req, res, next) {
        json(req, res, function (err) { return __awaiter(_this, void 0, void 0, function () {
            var now, _a, rawAccessToken, expiresIn, envoyRequest, envoyResponse_1, error_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (err) {
                            return [2 /*return*/, next(err)];
                        }
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 4, , 5]);
                        now = Date.now();
                        if (!(now > threshold)) return [3 /*break*/, 3];
                        return [4 /*yield*/, EnvoyPluginAPI_1.default.loginAsPlugin()];
                    case 2:
                        _a = _b.sent(), rawAccessToken = _a.access_token, expiresIn = _a.expires_in;
                        accessToken = rawAccessToken;
                        threshold = now + (expiresIn * 1000) - (1000 * 60 * 10);
                        _b.label = 3;
                    case 3:
                        envoyRequest = req;
                        envoyResponse_1 = res;
                        envoyRequest.envoy = new EnvoyPluginSDK_1.default(envoyRequest.body, envoyRequest[EnvoyRequest_1.VERIFIED], accessToken);
                        /**
                         * Respond with "ongoing" for long jobs.
                         */
                        envoyResponse_1.sendOngoing = function (message, debugInfo) {
                            if (message === void 0) { message = ''; }
                            if (debugInfo === void 0) { debugInfo = {}; }
                            envoyResponse_1.statusCode = HttpStatus_1.default.ONGOING;
                            envoyResponse_1.setHeader('Content-Type', 'application/json');
                            envoyResponse_1.end(JSON.stringify({ message: message, debugInfo: debugInfo }));
                        };
                        /**
                         * Respond with "ignored" if no action will be performed.
                         */
                        envoyResponse_1.sendIgnored = function (message, debugInfo) {
                            if (message === void 0) { message = ''; }
                            if (debugInfo === void 0) { debugInfo = {}; }
                            var attachments = [];
                            for (var _i = 2; _i < arguments.length; _i++) {
                                attachments[_i - 2] = arguments[_i];
                            }
                            envoyResponse_1.statusCode = HttpStatus_1.default.IGNORED;
                            envoyResponse_1.setHeader('Content-Type', 'application/json');
                            envoyResponse_1.end(JSON.stringify({ message: message, debugInfo: debugInfo, attachments: attachments }));
                        };
                        /**
                         * Respond with "failed" in case of errors.
                         */
                        envoyResponse_1.sendFailed = function (message, debugInfo) {
                            if (message === void 0) { message = ''; }
                            if (debugInfo === void 0) { debugInfo = {}; }
                            var attachments = [];
                            for (var _i = 2; _i < arguments.length; _i++) {
                                attachments[_i - 2] = arguments[_i];
                            }
                            envoyResponse_1.statusCode = HttpStatus_1.default.FAILED;
                            envoyResponse_1.setHeader('Content-Type', 'application/json');
                            envoyResponse_1.end(JSON.stringify({ message: message, debugInfo: debugInfo, attachments: attachments }));
                        };
                        next();
                        return [3 /*break*/, 5];
                    case 4:
                        error_1 = _b.sent();
                        next(error_1);
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        }); });
    };
}
exports.envoyMiddleware = envoyMiddleware;
/**
 * Catches errors and sets the proper status code.
 *
 * @category Middleware
 */
function errorMiddleware(onError) {
    if (onError === void 0) { onError = function () { }; }
    return function (err, req, res, next) {
        onError(err);
        if (res.headersSent) {
            return next(err);
        }
        res.statusCode = HttpStatus_1.default.UNEXPECTED_FAILURE;
        res.setHeader('Content-Type', 'application/json');
        res.end(JSON.stringify({ message: err.message }));
    };
}
exports.errorMiddleware = errorMiddleware;
