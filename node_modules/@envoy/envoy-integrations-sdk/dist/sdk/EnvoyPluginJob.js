"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * A "job" is an event, like `entry_sign_in`.
 * When your plugin handles the event, you can use this job concept
 * to update the status (e.g. complete, failed, ignored)
 * as well as attach extra data to the event's subject
 * (e.g. showing a generated card number in the dashboard for a visitor on `entry_sign_in`).
 *
 * @category Request Object
 */
var EnvoyPluginJob = /** @class */ (function () {
    function EnvoyPluginJob(pluginAPI, jobId) {
        this.api = pluginAPI;
        this.id = jobId;
    }
    EnvoyPluginJob.prototype.execute = function (status, message, reason, attachments) {
        if (attachments === void 0) { attachments = []; }
        var updates = {
            attachments: attachments.map(function (attachment) { return (__assign({ type: 'text' }, attachment)); }),
        };
        if (status) {
            Object.assign(updates, { status: status });
        }
        if (message) {
            Object.assign(updates, { status_message: message });
        }
        if (reason) {
            Object.assign(updates, { failure_reason: reason });
        }
        return this.api.updateJob(this.id, updates);
    };
    /**
     * Add attachments to this job.
     */
    EnvoyPluginJob.prototype.attach = function () {
        var attachments = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            attachments[_i] = arguments[_i];
        }
        return this.execute(null, null, null, attachments);
    };
    /**
     * Reports that the job is complete.
     *
     * Instead of calling this directly, you can return a 200 response from the job's event handler,
     * using {@link EnvoyRequest.send}.
     */
    EnvoyPluginJob.prototype.complete = function (message) {
        var attachments = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            attachments[_i - 1] = arguments[_i];
        }
        return this.execute('done', message, null, attachments);
    };
    /**
     * Reports that the job is ignored.
     *
     * Instead of calling this directly, you can return a 400 response from the job's event handler,
     * using {@link EnvoyRequest.sendIgnored}.
     */
    EnvoyPluginJob.prototype.ignore = function (message, reason) {
        return this.execute('ignored', message, reason);
    };
    /**
     * Reports that the job is ignored.
     *
     * Instead of calling this directly, you can return a 400 response from the job's event handler,
     * using {@link EnvoyRequest.sendFailed}.
     */
    EnvoyPluginJob.prototype.fail = function (message, reason) {
        return this.execute('failed', message, reason);
    };
    /**
     * Updates the job with a new message and attachments.
     *
     * Can be used to periodically update long-running jobs.
     */
    EnvoyPluginJob.prototype.update = function (message) {
        var attachments = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            attachments[_i - 1] = arguments[_i];
        }
        return this.execute(null, message, null, attachments);
    };
    return EnvoyPluginJob;
}());
exports.default = EnvoyPluginJob;
