"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validationRouteHandler = exports.selectedValuesRouteHandler = exports.remoteValueRouteHandler = exports.pluginUninstalledEventHandler = exports.optionsRouteHandler = exports.takeoverEventHandler = exports.notificationEventHandler = exports.migrationRouteHandler = exports.locationEventHandler = exports.inviteEventHandler = exports.entryEventHandler = exports.asyncHandler = void 0;
/**
 * Wraps any express.js-based handlers
 * to catch Promise-based errors.
 *
 * @category Handler
 */
// eslint-disable-next-line max-len
function asyncHandler(handler) {
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    return function (req, res, next) {
        void Promise.resolve().then(function () { return handler(req, res); }).catch(next);
    };
}
exports.asyncHandler = asyncHandler;
/**
 * Handler for entry events.
 *
 * @category Handler
 */
function entryEventHandler(handler) {
    return asyncHandler(handler);
}
exports.entryEventHandler = entryEventHandler;
/**
 * Handler for invite events.
 *
 * @category Handler
 */
function inviteEventHandler(handler) {
    return asyncHandler(handler);
}
exports.inviteEventHandler = inviteEventHandler;
/**
 * Handler for location events.
 *
 * @category Handler
 */
function locationEventHandler(handler) {
    return asyncHandler(handler);
}
exports.locationEventHandler = locationEventHandler;
/**
 * Handler for a migration route.
 *
 * @category Handler
 */
function migrationRouteHandler(handler) {
    return asyncHandler(handler);
}
exports.migrationRouteHandler = migrationRouteHandler;
/**
 * Handler for notification events.
 *
 * @category Handler
 */
function notificationEventHandler(handler) {
    return asyncHandler(handler);
}
exports.notificationEventHandler = notificationEventHandler;
/**
 * Handler for takeover events.
 *
 * @category Handler
 */
function takeoverEventHandler(handler) {
    return asyncHandler(handler);
}
exports.takeoverEventHandler = takeoverEventHandler;
/**
 * Handler for options URL routes.
 *
 * @category Handler
 */
function optionsRouteHandler(handler) {
    return asyncHandler(handler);
}
exports.optionsRouteHandler = optionsRouteHandler;
/**
 * Handler for `plugin_uninstalled` events.
 *
 * @category Handler
 */
function pluginUninstalledEventHandler(handler) {
    return asyncHandler(handler);
}
exports.pluginUninstalledEventHandler = pluginUninstalledEventHandler;
/**
 * Handler for remote value URL routes.
 *
 * @category Handler
 */
function remoteValueRouteHandler(handler) {
    return asyncHandler(handler);
}
exports.remoteValueRouteHandler = remoteValueRouteHandler;
/**
 * Handler for selected values URL routes.
 *
 * @category Handler
 */
function selectedValuesRouteHandler(handler) {
    return asyncHandler(handler);
}
exports.selectedValuesRouteHandler = selectedValuesRouteHandler;
/**
 * Handler for validation URL routes.
 *
 * @category Handler
 */
function validationRouteHandler(handler) {
    return asyncHandler(handler);
}
exports.validationRouteHandler = validationRouteHandler;
