"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.envoyAxiosErrorLogger = exports.envoyAxiosResponseLogger = exports.envoyAxiosRequestLogger = void 0;
var chalk_1 = __importDefault(require("chalk"));
var util_1 = __importDefault(require("util"));
function envoyAxiosRequestLogger(config) {
    var log = console.log;
    log('---------------- Axios Request ----------------\n');
    if (config === null || config === void 0 ? void 0 : config.method) {
        var boldMethodText = chalk_1.default.bold('Method:');
        var method = config.method.toUpperCase();
        switch (method) {
            case 'GET':
                log(boldMethodText + " " + chalk_1.default.green(method) + "\n");
                break;
            case 'PUT':
                log(boldMethodText + " " + chalk_1.default.yellow(method) + "\n");
                break;
            case 'PATCH':
                log(boldMethodText + " " + chalk_1.default.yellow(method) + "\n");
                break;
            case 'POST':
                log(boldMethodText + " " + chalk_1.default.blue(method) + "\n");
                break;
            case 'DELETE':
                log(boldMethodText + " " + chalk_1.default.red(method) + "\n");
                break;
            default:
                log(boldMethodText + " " + method + "\n");
                break;
        }
        ;
    }
    if ((config === null || config === void 0 ? void 0 : config.baseURL) && (config === null || config === void 0 ? void 0 : config.url)) {
        log(chalk_1.default.bold('URL') + ": " + config.baseURL + "/" + config.url + "\n");
    }
    if (config === null || config === void 0 ? void 0 : config.headers) {
        log(chalk_1.default.bold('Headers:') + " " + util_1.default.inspect(config === null || config === void 0 ? void 0 : config.headers) + "\n");
    }
    if (config === null || config === void 0 ? void 0 : config.auth) {
        log(chalk_1.default.bold('Auth:') + " " + util_1.default.inspect(config === null || config === void 0 ? void 0 : config.auth) + "\n");
    }
    if (config === null || config === void 0 ? void 0 : config.params) {
        log(chalk_1.default.bold('Params:') + " " + util_1.default.inspect(config === null || config === void 0 ? void 0 : config.params) + "\n");
    }
    if (config === null || config === void 0 ? void 0 : config.data) {
        log(chalk_1.default.bold('Request Data:') + " " + util_1.default.inspect(config === null || config === void 0 ? void 0 : config.data) + "\n");
    }
    log('------------ End Of Axios Request ------------\n');
    return config;
}
exports.envoyAxiosRequestLogger = envoyAxiosRequestLogger;
function envoyAxiosResponseLogger(response) {
    var _a, _b, _c;
    var log = console.log;
    log('---------------- Axios Response ----------------\n');
    if ((_a = response === null || response === void 0 ? void 0 : response.request) === null || _a === void 0 ? void 0 : _a.method) {
        var boldMethodText = chalk_1.default.bold('Method:');
        var method = response.request.method;
        switch (method) {
            case 'GET':
                log(boldMethodText + " " + chalk_1.default.green(method) + "\n");
                break;
            case 'PUT':
                log(boldMethodText + " " + chalk_1.default.yellow(method) + "\n");
                break;
            case 'PATCH':
                log(boldMethodText + " " + chalk_1.default.yellow(method) + "\n");
                break;
            case 'POST':
                log(boldMethodText + " " + chalk_1.default.blue(method) + "\n");
                break;
            case 'DELETE':
                log(boldMethodText + " " + chalk_1.default.red(method) + "\n");
                break;
            default:
                log(boldMethodText + " " + method + "\n");
                break;
        }
        ;
    }
    if (((_b = response === null || response === void 0 ? void 0 : response.request) === null || _b === void 0 ? void 0 : _b.baseURL) && ((_c = response === null || response === void 0 ? void 0 : response.request) === null || _c === void 0 ? void 0 : _c.url)) {
        log(chalk_1.default.bold('Request URL') + ": " + response.request.baseURL + "/" + response.request.url + "\n");
    }
    if ((response === null || response === void 0 ? void 0 : response.status) && (response === null || response === void 0 ? void 0 : response.statusText)) {
        var boldStatusTitle = chalk_1.default.bold('Status:');
        var boldStatusTextTitle = chalk_1.default.bold('Status Text:');
        var status_1 = response.status;
        var statusText = response.statusText;
        if (199 < status_1 && status_1 < 300) {
            log(boldStatusTitle + " " + chalk_1.default.green(status_1) + "\n");
            log(boldStatusTextTitle + " " + chalk_1.default.green(statusText) + "\n");
        }
        else {
            log(boldStatusTitle + " " + chalk_1.default.red(status_1) + "\n");
            log(boldStatusTextTitle + " " + chalk_1.default.red(statusText) + "\n");
        }
    }
    if (response === null || response === void 0 ? void 0 : response.data) {
        log(chalk_1.default.bold('Response Data:') + " " + util_1.default.inspect(response === null || response === void 0 ? void 0 : response.data) + "\n");
    }
    log('------------ End Of Axios Response ------------\n');
    return response;
}
exports.envoyAxiosResponseLogger = envoyAxiosResponseLogger;
function envoyAxiosErrorLogger(error) {
    var _a, _b, _c, _d, _e, _f;
    var log = console.log;
    log('---------------- Axios Error ----------------\n');
    if ((_a = error === null || error === void 0 ? void 0 : error.request) === null || _a === void 0 ? void 0 : _a.method) {
        var boldMethodText = chalk_1.default.bold('Method:');
        var method = error.request.method;
        switch (method) {
            case 'GET':
                log(boldMethodText + " " + chalk_1.default.green(method) + "\n");
                break;
            case 'PUT':
                log(boldMethodText + " " + chalk_1.default.yellow(method) + "\n");
                break;
            case 'PATCH':
                log(boldMethodText + " " + chalk_1.default.yellow(method) + "\n");
                break;
            case 'POST':
                log(boldMethodText + " " + chalk_1.default.blue(method) + "\n");
                break;
            case 'DELETE':
                log(boldMethodText + " " + chalk_1.default.red(method) + "\n");
                break;
            default:
                log(boldMethodText + " " + method + "\n");
                break;
        }
        ;
    }
    if (((_b = error === null || error === void 0 ? void 0 : error.request) === null || _b === void 0 ? void 0 : _b.baseURL) && ((_c = error === null || error === void 0 ? void 0 : error.request) === null || _c === void 0 ? void 0 : _c.url)) {
        log(chalk_1.default.bold('Request URL') + ": " + error.request.baseURL + "/" + error.request.url + "\n");
    }
    if (((_d = error === null || error === void 0 ? void 0 : error.response) === null || _d === void 0 ? void 0 : _d.status) && ((_e = error === null || error === void 0 ? void 0 : error.response) === null || _e === void 0 ? void 0 : _e.statusText)) {
        var boldStatusTitle = chalk_1.default.bold('Status:');
        var boldStatusTextTitle = chalk_1.default.bold('Status Text:');
        var status_2 = error.response.status;
        var statusText = error.response.statusText;
        if (199 < status_2 && status_2 < 300) {
            log(boldStatusTitle + " " + chalk_1.default.green(status_2) + "\n");
            log(boldStatusTextTitle + " " + chalk_1.default.green(statusText) + "\n");
        }
        else {
            log(boldStatusTitle + " " + chalk_1.default.red(status_2) + "\n");
            log(boldStatusTextTitle + " " + chalk_1.default.red(statusText) + "\n");
        }
    }
    if ((_f = error.response) === null || _f === void 0 ? void 0 : _f.data) {
        log(chalk_1.default.bold('Response Data:') + " " + util_1.default.inspect(error.response.data) + "\n");
    }
    log('------------ End Of Axios Error ------------\n');
    throw error;
}
exports.envoyAxiosErrorLogger = envoyAxiosErrorLogger;
