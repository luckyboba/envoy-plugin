import EnvoyAPI from '../base/EnvoyAPI';
import EnvoyPluginJobUpdate from '../internal/EnvoyPluginJobUpdate';
import EnvoyStorageCommand from '../internal/EnvoyStorageCommand';
import EnvoyStorageResult from '../internal/EnvoyStorageResult';
import { EnvoyMetaAuth } from './EnvoyMeta';
/**
 * API endpoints for *plugin-scoped* tokens.
 *
 * @category API
 * @category Request Object
 */
export default class EnvoyPluginAPI extends EnvoyAPI {
    updateJob(jobId: string, update: EnvoyPluginJobUpdate): Promise<void>;
    /**
     * Fetches the current `config` saved for this install during setup by the customer.
     */
    getPluginInstallConfig(installId: string): Promise<Record<string, unknown>>;
    /**
     * Merges changes with the current `config` saved for this install during setup by the customer.
     *
     * To remove an item from the saved `config`, set the item's key to `null`.
     */
    setPluginInstallConfig(installId: string, config: Record<string, unknown>): Promise<void>;
    storagePipeline<Result extends EnvoyStorageResult = EnvoyStorageResult>(commands: Array<EnvoyStorageCommand>, installId?: string): Promise<Array<Result>>;
    createNotification(installId: string, params?: {}): Promise<void>;
    /**
     * Gets a plugin access token using `client_credentials` as the grant type.
     */
    static loginAsPlugin(id?: string, secret?: string, scope?: string[]): Promise<EnvoyMetaAuth>;
}
//# sourceMappingURL=EnvoyPluginAPI.d.ts.map