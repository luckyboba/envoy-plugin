"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.inviteOnlyEntryFilterMiddleware = exports.excludedEmployeesFilterMiddleware = exports.employeeSignInEnabledFilterMiddleware = exports.booleanFilterMiddleware = void 0;
/**
 * Will only proceed if the install's `config` has a truthy value for the given `key`.
 *
 * @internal
 */
function booleanFilterMiddleware(key, message) {
    return function (req, res, next) {
        if (req.envoy.meta.config[key]) {
            return next();
        }
        res.sendIgnored(message);
    };
}
exports.booleanFilterMiddleware = booleanFilterMiddleware;
/**
 * Will only proceed if the install's `config` has a truthy value for the given `employeeSignInEnabledKey`.
 *
 * @category Filter
 * @category Middleware
 */
function employeeSignInEnabledFilterMiddleware(employeeSignInEnabledKey, message) {
    if (message === void 0) { message = 'Envoy Protect is disabled.'; }
    return booleanFilterMiddleware(employeeSignInEnabledKey, message);
}
exports.employeeSignInEnabledFilterMiddleware = employeeSignInEnabledFilterMiddleware;
/**
 * Will not proceed if the employee who's signing in is present in the excluded employees list.
 *
 * @category Filter
 * @category Middleware
 */
function excludedEmployeesFilterMiddleware(excludeEmployeesKey, message) {
    if (message === void 0) { message = 'Employee excluded from integration.'; }
    return function (req, res, next) {
        var _a;
        var _b = req.envoy, config = _b.meta.config, payload = _b.payload;
        if (!payload.attributes['employee-screening-flow']) {
            return next();
        }
        var excludedEmployees = config[excludeEmployeesKey] || [];
        if (!Array.isArray(excludedEmployees)) {
            return next(new Error(excludeEmployeesKey + " is not an array."));
        }
        var employeeId = (_a = payload.relationships.employee) === null || _a === void 0 ? void 0 : _a.data.id;
        if (!employeeId || !excludedEmployees.includes(employeeId)) {
            return next();
        }
        res.sendIgnored(message);
    };
}
exports.excludedEmployeesFilterMiddleware = excludedEmployeesFilterMiddleware;
/**
 * Will only proceed if the entry has an invite
 * and the install's `config` has a truthy value for the given `invitesOnlyKey`.
 *
 * @category Filter
 * @category Middleware
 */
function inviteOnlyEntryFilterMiddleware(invitesOnlyKey, message) {
    if (message === void 0) { message = 'Visitors must be invited.'; }
    return function (req, res, next) {
        var _a = req.envoy, config = _a.meta.config, payload = _a.payload;
        if (!payload.relationships.invite && config[invitesOnlyKey]) {
            return res.sendIgnored(message);
        }
        next();
    };
}
exports.inviteOnlyEntryFilterMiddleware = inviteOnlyEntryFilterMiddleware;
