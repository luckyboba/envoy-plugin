"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var EnvoyPluginStoragePipeline_1 = __importDefault(require("../base/EnvoyPluginStoragePipeline"));
/**
 * A key-value storage that can be scoped to a specific install,
 * or to the plugin itself.
 *
 * @category Storage
 * @category Request Object
 */
var EnvoyPluginStorage = /** @class */ (function () {
    function EnvoyPluginStorage(pluginAPI, installId) {
        this.api = pluginAPI;
        this.installId = installId;
    }
    /**
     * Creates a new pipeline instance.
     */
    EnvoyPluginStorage.prototype.pipeline = function () {
        return new EnvoyPluginStoragePipeline_1.default(this.api, this.installId);
    };
    /**
     * Gets a single {@link EnvoyStorageItem} from storage.
     *
     * Wrapper for single pipeline get.
     */
    EnvoyPluginStorage.prototype.get = function (key) {
        return this.pipeline().get(key).executeSingle();
    };
    /**
     * Sets a single {@link EnvoyStorageItem} from storage.
     *
     * Wrapper for single pipeline set.
     */
    EnvoyPluginStorage.prototype.set = function (key, value) {
        return this.pipeline().set(key, value).executeSingle();
    };
    /**
     * Sets a single unique string {@link EnvoyStorageItem} from storage.
     *
     * Wrapper for single pipeline setUnique.
     */
    EnvoyPluginStorage.prototype.setUnique = function (key, options) {
        if (options === void 0) { options = {}; }
        return this.pipeline().setUnique(key, options).executeSingle();
    };
    /**
     * Sets a single unique number {@link EnvoyStorageItem} from storage.
     *
     * Wrapper for single pipeline setUnique.
     */
    EnvoyPluginStorage.prototype.setUniqueNum = function (key, options) {
        if (options === void 0) { options = {}; }
        return this.pipeline().setUniqueNum(key, options).executeSingle();
    };
    /**
     * Unsets an {@link EnvoyStorageItem} from storage. Returns null if the item did not previously exist.
     *
     * Wrapper for single pipeline unset.
     */
    EnvoyPluginStorage.prototype.unset = function (key) {
        return this.pipeline().unset(key).executeSingle();
    };
    /**
     * Returns an array of {@link EnvoyStorageItem} from storage.
     *
     * Wrapper for single pipeline list.
     */
    EnvoyPluginStorage.prototype.list = function (page) {
        if (page === void 0) { page = 1; }
        return this.pipeline().list(page).executeSingle();
    };
    return EnvoyPluginStorage;
}());
exports.default = EnvoyPluginStorage;
