"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var EnvoyPluginStorage_1 = __importDefault(require("./EnvoyPluginStorage"));
var EnvoyPluginJob_1 = __importDefault(require("./EnvoyPluginJob"));
var EnvoyJWT_1 = __importDefault(require("../util/EnvoyJWT"));
var EnvoyUserAPI_1 = __importDefault(require("./EnvoyUserAPI"));
var EnvoyPluginAPI_1 = __importDefault(require("./EnvoyPluginAPI"));
var EntryPayload_1 = require("../payloads/EntryPayload");
var InvitePayload_1 = require("../payloads/InvitePayload");
/**
 * Sets up all relevant Envoy functions.
 * Attaches itself to every request object using our {@link middleware},
 * to allow for easy access to Envoy functions.
 *
 * @category SDK
 */
var EnvoyPluginSDK = /** @class */ (function () {
    /**
     * Don't create an instance of this class directly.
     *
     * Instead, use {@link middleware} to automatically attach an instance to `req` on every request.
     * @param body - Request body
     * @param isVerified - If the request has been verified via {@link EnvoySignatureVerifier}
     * @param pluginAccessToken - An access token from {@link EnvoyPluginAPI.loginAsPlugin}
     */
    function EnvoyPluginSDK(body, isVerified, pluginAccessToken) {
        if (isVerified === void 0) { isVerified = false; }
        if (pluginAccessToken === void 0) { pluginAccessToken = null; }
        /**
         * The internally managed plugin access token.
         * Use the `pluginAPI` instead of this directly.
         */
        this.pluginAccessToken = null;
        this.body = body;
        this.isVerified = isVerified;
        this.pluginAccessToken = pluginAccessToken;
    }
    Object.defineProperty(EnvoyPluginSDK.prototype, "meta", {
        /**
         * The metadata for the request.
         * Either an {@link EnvoyEventMeta}} or {@link EnvoyRouteMeta}.
         */
        get: function () {
            if (!this.isVerified) {
                throw new Error('Could not verify meta.');
            }
            return this.body.meta;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EnvoyPluginSDK.prototype, "payload", {
        /**
         * The payload for the request.
         * For events, it's some Envoy event payload, like an {@link EntryPayload} or {@link InvitePayload}.
         * For setup step validation URLs, it's the form submitted values for a validation URL.
         */
        get: function () {
            if (!this.isVerified) {
                throw new Error('Could not verify payload.');
            }
            var payload = this.body.payload;
            switch (payload.type) {
                case 'entries':
                    return EntryPayload_1.normalizeEntryPayload(payload);
                case 'invites':
                    return InvitePayload_1.normalizeInvitePayload(payload);
                default:
                    return payload;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EnvoyPluginSDK.prototype, "userAPI", {
        /**
         * Envoy API scoped to the user.
         * Used only in routes.
         */
        get: function () {
            var meta = this.meta;
            var auth = meta.auth;
            var accessToken = auth === null || auth === void 0 ? void 0 : auth.access_token;
            if (!accessToken && ('forwarded_bearer_token' in meta)) {
                accessToken = meta.forwarded_bearer_token;
            }
            if (!accessToken) {
                throw new Error("This user's API token was not found. Either no scopes were asked for, or this is a route.");
            }
            return new EnvoyUserAPI_1.default(accessToken);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EnvoyPluginSDK.prototype, "pluginAPI", {
        /**
         * Envoy API scoped to the plugin.
         * Used to perform storage or job operations.
         */
        get: function () {
            var pluginAccessToken = this.pluginAccessToken;
            if (!pluginAccessToken) {
                throw new Error('No API token found. Are your Envoy client ID and secret set?');
            }
            return new EnvoyPluginAPI_1.default(pluginAccessToken);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EnvoyPluginSDK.prototype, "getStorage", {
        /**
         * A function that returns an instance of EnvoyPluginStorage,
         * optionally scoped to an install ID.
         *
         * Use {@link installStorage} or {@link globalStorage} instead of this directly.
         */
        get: function () {
            var _this = this;
            return function (installId) { return new EnvoyPluginStorage_1.default(_this.pluginAPI, installId); };
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EnvoyPluginSDK.prototype, "installStorage", {
        /**
         * Storage scoped to the install.
         */
        get: function () {
            var installId = this.meta.install_id;
            if (!installId) {
                throw new Error('No install ID found in meta.');
            }
            return this.getStorage(installId);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EnvoyPluginSDK.prototype, "globalStorage", {
        /**
         * Storage scoped globally (across installs).
         */
        get: function () {
            return this.getStorage();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EnvoyPluginSDK.prototype, "getJob", {
        /**
         * Returns a job based on an ID.
         */
        get: function () {
            var _this = this;
            return function (jobId) { return new EnvoyPluginJob_1.default(_this.pluginAPI, jobId); };
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EnvoyPluginSDK.prototype, "jobId", {
        /**
         * Returns the current job's ID.
         */
        get: function () {
            var meta = this.meta;
            if ('job' in meta) {
                return meta.job.id;
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EnvoyPluginSDK.prototype, "job", {
        /**
         * Perform operations on the current job.
         */
        get: function () {
            var jobId = this.jobId;
            if (!jobId) {
                throw new Error('No job found in meta. Are you in a worker?');
            }
            return this.getJob(jobId);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EnvoyPluginSDK.prototype, "jwt", {
        /**
         * A utility to encode and decode JWTs.
         * Useful for verifiable communications between plugin endpoints.
         */
        // eslint-disable-next-line class-methods-use-this
        get: function () {
            return new EnvoyJWT_1.default();
        },
        enumerable: false,
        configurable: true
    });
    return EnvoyPluginSDK;
}());
exports.default = EnvoyPluginSDK;
