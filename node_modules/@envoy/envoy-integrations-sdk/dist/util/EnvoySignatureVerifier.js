"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var crypto_1 = __importDefault(require("crypto"));
var constants_1 = require("../constants");
var defaultOptions = {
    algorithm: 'sha256',
    encoding: 'base64',
    secret: constants_1.envoyClientSecret,
    header: 'x-envoy-signature',
};
/**
 * Verifies that a request is coming from Envoy.
 *
 * @category Helper
 */
var EnvoySignatureVerifier = /** @class */ (function () {
    function EnvoySignatureVerifier(options) {
        if (options === void 0) { options = defaultOptions; }
        this.options = __assign(__assign({}, defaultOptions), options);
        if (!this.options.secret) {
            throw new Error('No client secret found in the ENVOY_CLIENT_SECRET environment variable.');
        }
    }
    /**
     * Verifies that the signature provided matches the request body.
     */
    EnvoySignatureVerifier.prototype.verify = function (req, rawBody) {
        var _a = this.options, algorithm = _a.algorithm, encoding = _a.encoding, secret = _a.secret, header = _a.header;
        if (!req.headers[header]) {
            return false;
        }
        var receivedDigest = req.headers[header];
        var computedHmac = crypto_1.default.createHmac(algorithm, secret);
        computedHmac.update(rawBody);
        return crypto_1.default.timingSafeEqual(Buffer.from(receivedDigest), Buffer.from(computedHmac.digest(encoding)));
    };
    return EnvoySignatureVerifier;
}());
exports.default = EnvoySignatureVerifier;
