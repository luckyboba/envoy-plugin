"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
var constants_1 = require("../constants");
/**
 * Helper to encode and decode JWTs.
 *
 * @category Helper
 * @category Request Object
 */
var EnvoyJWT = /** @class */ (function () {
    function EnvoyJWT(secret, algorithm) {
        if (secret === void 0) { secret = constants_1.jwtSecret; }
        if (algorithm === void 0) { algorithm = 'HS256'; }
        if (!secret) {
            throw new Error('JWT secret missing. Have you set the `JWT_SECRET` environment variable?');
        }
        this.secret = secret;
        this.algorithm = algorithm;
    }
    EnvoyJWT.prototype.encode = function (subject, expiresIn, payload) {
        if (payload === void 0) { payload = {}; }
        var _a = this, secret = _a.secret, algorithm = _a.algorithm;
        var options = { algorithm: algorithm };
        if (subject) {
            options.subject = "" + subject;
        }
        if (expiresIn) {
            options.expiresIn = expiresIn;
        }
        return jsonwebtoken_1.default.sign(payload, secret, options);
    };
    EnvoyJWT.prototype.decode = function (token, options) {
        if (options === void 0) { options = {}; }
        var _a = this, secret = _a.secret, algorithm = _a.algorithm;
        return jsonwebtoken_1.default.verify(token, secret, __assign(__assign({ ignoreExpiration: false, ignoreNotBefore: false }, options), { algorithms: [algorithm] }));
    };
    return EnvoyJWT;
}());
exports.default = EnvoyJWT;
