import EnvoyPluginStoragePipeline from '../base/EnvoyPluginStoragePipeline';
import EnvoyStorageItem from '../sdk/EnvoyStorageItem';
import { EnvoyStorageSetUniqueNumOptions, EnvoyStorageSetUniqueOptions } from '../internal/EnvoyStorageCommand';
import EnvoyStorageResult from '../internal/EnvoyStorageResult';
export default class EnvoyPluginStoragePipelineMock extends EnvoyPluginStoragePipeline {
    execute<Result extends EnvoyStorageResult = EnvoyStorageResult>(): Promise<Array<Result>>;
    private static storage;
    private static uniqueStringKeys;
    private static uniqueStringValues;
    private static uniqueNumberKeys;
    private static uniqueNumberValues;
    private static normalizeKey;
    private static itemFromKeyValue;
    static get<Value = unknown>(key: string, isGlobal?: boolean): Value | null;
    static set<Value = unknown>(key: string, value: Value, isGlobal?: boolean): Value;
    static setUnique(key: string, options?: EnvoyStorageSetUniqueOptions, isGlobal?: boolean): string;
    static setUniqueNum(key: string, options?: EnvoyStorageSetUniqueNumOptions, isGlobal?: boolean): number;
    static unset<Value = unknown>(key: string, isGlobal?: boolean): Value | null;
    static list(page?: number, isGlobal?: boolean): EnvoyStorageItem<unknown>[];
    static reset(): void;
    static makeUniqueString(chars: string, size: number): string;
    static makeUniqueNumber(min: number, max: number): number;
}
//# sourceMappingURL=EnvoyPluginStoragePipelineMock.d.ts.map