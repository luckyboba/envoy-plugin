"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var EnvoyPluginStoragePipeline_1 = __importDefault(require("../base/EnvoyPluginStoragePipeline"));
var EnvoyStorageCommand_1 = require("../internal/EnvoyStorageCommand");
var DEFAULT_UNIQUE_OPTIONS = {
    chars: EnvoyStorageCommand_1.UNIQUE_OPTIONS_DEFAULT_CHARS,
    size: EnvoyStorageCommand_1.UNIQUE_OPTIONS_DEFAULT_SIZE,
};
var DEFAULT_UNIQUE_NUM_OPTIONS = {
    min: EnvoyStorageCommand_1.UNIQUE_NUM_OPTIONS_DEFAULT_MIN,
    max: EnvoyStorageCommand_1.UNIQUE_NUM_OPTIONS_DEFAULT_MAX,
};
var EnvoyPluginStoragePipelineMock = /** @class */ (function (_super) {
    __extends(EnvoyPluginStoragePipelineMock, _super);
    function EnvoyPluginStoragePipelineMock() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    EnvoyPluginStoragePipelineMock.prototype.execute = function () {
        var _this = this;
        return Promise.resolve(this.commands.map(function (command) {
            var isGlobal = !_this.installId;
            switch (command.action) {
                case 'get': {
                    var value = EnvoyPluginStoragePipelineMock.get(command.key, isGlobal);
                    if (value === null) {
                        return null;
                    }
                    return EnvoyPluginStoragePipelineMock.itemFromKeyValue(command.key, value);
                }
                case 'set': {
                    var value = EnvoyPluginStoragePipelineMock.set(command.key, command.value, isGlobal);
                    return EnvoyPluginStoragePipelineMock.itemFromKeyValue(command.key, value);
                }
                case 'set_unique':
                    try {
                        var value = EnvoyPluginStoragePipelineMock.setUnique(command.key, command, isGlobal);
                        return EnvoyPluginStoragePipelineMock.itemFromKeyValue(command.key, value);
                    }
                    catch (err) {
                        return null;
                    }
                case 'set_unique_num': {
                    try {
                        var value = EnvoyPluginStoragePipelineMock.setUniqueNum(command.key, command, isGlobal);
                        return EnvoyPluginStoragePipelineMock.itemFromKeyValue(command.key, value);
                    }
                    catch (err) {
                        return null;
                    }
                }
                case 'unset': {
                    var value = EnvoyPluginStoragePipelineMock.unset(command.key, isGlobal);
                    if (value === null) {
                        return null;
                    }
                    return EnvoyPluginStoragePipelineMock.itemFromKeyValue(command.key, value);
                }
                case 'list':
                    return EnvoyPluginStoragePipelineMock.list(command.page);
                default:
                    return null;
            }
        }));
    };
    EnvoyPluginStoragePipelineMock.normalizeKey = function (key, isGlobal) {
        return isGlobal ? "global_" + key : "install_" + key;
    };
    EnvoyPluginStoragePipelineMock.itemFromKeyValue = function (key, value) {
        return { key: key, value: value };
    };
    EnvoyPluginStoragePipelineMock.get = function (key, isGlobal) {
        if (isGlobal === void 0) { isGlobal = false; }
        key = EnvoyPluginStoragePipelineMock.normalizeKey(key, isGlobal);
        if (!Object.keys(EnvoyPluginStoragePipelineMock.storage).includes(key)) {
            return null;
        }
        return EnvoyPluginStoragePipelineMock.storage[key];
    };
    EnvoyPluginStoragePipelineMock.set = function (key, value, isGlobal) {
        if (isGlobal === void 0) { isGlobal = false; }
        key = EnvoyPluginStoragePipelineMock.normalizeKey(key, isGlobal);
        EnvoyPluginStoragePipelineMock.unset(key);
        EnvoyPluginStoragePipelineMock.storage[key] = value;
        return value;
    };
    EnvoyPluginStoragePipelineMock.setUnique = function (key, options, isGlobal) {
        if (options === void 0) { options = DEFAULT_UNIQUE_OPTIONS; }
        if (isGlobal === void 0) { isGlobal = false; }
        key = EnvoyPluginStoragePipelineMock.normalizeKey(key, isGlobal);
        var chars = (options.chars && options.chars.length) ? options.chars : EnvoyStorageCommand_1.UNIQUE_OPTIONS_DEFAULT_CHARS;
        var size = options.size || EnvoyStorageCommand_1.UNIQUE_OPTIONS_DEFAULT_SIZE;
        if (!chars || !size) {
            throw new Error('Invalid "chars" or "size" arguments');
        }
        var value = EnvoyPluginStoragePipelineMock.makeUniqueString(chars, size);
        var numTries = 0;
        while (EnvoyPluginStoragePipelineMock.uniqueStringValues.has(value)) {
            value = EnvoyPluginStoragePipelineMock.makeUniqueString(chars, size);
            // eslint-disable-next-line no-plusplus
            if (++numTries > 1000) {
                throw new Error('Max tries reached');
            }
        }
        EnvoyPluginStoragePipelineMock.unset(key);
        EnvoyPluginStoragePipelineMock.uniqueStringValues.add(value);
        EnvoyPluginStoragePipelineMock.uniqueStringKeys.add(key);
        EnvoyPluginStoragePipelineMock.storage[key] = value;
        return value;
    };
    EnvoyPluginStoragePipelineMock.setUniqueNum = function (key, options, isGlobal) {
        if (options === void 0) { options = DEFAULT_UNIQUE_NUM_OPTIONS; }
        if (isGlobal === void 0) { isGlobal = false; }
        key = EnvoyPluginStoragePipelineMock.normalizeKey(key, isGlobal);
        var min = options.min || EnvoyStorageCommand_1.UNIQUE_NUM_OPTIONS_DEFAULT_MIN;
        var max = options.max || EnvoyStorageCommand_1.UNIQUE_NUM_OPTIONS_DEFAULT_MAX;
        if (min >= max) {
            throw new Error('"min" must be lower than "max"');
        }
        var value = EnvoyPluginStoragePipelineMock.makeUniqueNumber(min, max);
        var numTries = 0;
        while (EnvoyPluginStoragePipelineMock.uniqueNumberValues.has(value)) {
            value = EnvoyPluginStoragePipelineMock.makeUniqueNumber(min, max);
            // eslint-disable-next-line no-plusplus
            if (++numTries > 1000) {
                throw new Error('Max tries reached');
            }
        }
        EnvoyPluginStoragePipelineMock.unset(key);
        EnvoyPluginStoragePipelineMock.uniqueNumberValues.add(value);
        EnvoyPluginStoragePipelineMock.uniqueNumberKeys.add(key);
        EnvoyPluginStoragePipelineMock.storage[key] = value;
        return value;
    };
    EnvoyPluginStoragePipelineMock.unset = function (key, isGlobal) {
        if (isGlobal === void 0) { isGlobal = false; }
        key = EnvoyPluginStoragePipelineMock.normalizeKey(key, isGlobal);
        if (!Object.keys(EnvoyPluginStoragePipelineMock.storage).includes(key)) {
            return null;
        }
        var value = EnvoyPluginStoragePipelineMock.storage[key];
        if (EnvoyPluginStoragePipelineMock.uniqueStringKeys.has(key)) {
            EnvoyPluginStoragePipelineMock.uniqueStringValues.delete(value);
            EnvoyPluginStoragePipelineMock.uniqueStringKeys.delete(key);
        }
        if (EnvoyPluginStoragePipelineMock.uniqueNumberKeys.has(key)) {
            EnvoyPluginStoragePipelineMock.uniqueNumberValues.delete(value);
            EnvoyPluginStoragePipelineMock.uniqueNumberKeys.delete(key);
        }
        delete EnvoyPluginStoragePipelineMock.storage[key];
        return value;
    };
    EnvoyPluginStoragePipelineMock.list = function (page, isGlobal) {
        if (page === void 0) { page = 1; }
        if (isGlobal === void 0) { isGlobal = false; }
        var limit = 100;
        var offset = (page - 1) * limit;
        return Object.keys(EnvoyPluginStoragePipelineMock.storage)
            .filter(function (key) { return (key.startsWith('global_') && isGlobal) || (key.startsWith('install_') && !isGlobal); })
            .sort()
            .slice(offset, limit)
            .map(function (key) {
            var value = EnvoyPluginStoragePipelineMock.storage[key];
            var pieces = key.split('_');
            pieces.shift();
            var normalizedKey = pieces.join();
            return { key: normalizedKey, value: value };
        });
    };
    EnvoyPluginStoragePipelineMock.reset = function () {
        EnvoyPluginStoragePipelineMock.storage = {};
        EnvoyPluginStoragePipelineMock.uniqueStringKeys.clear();
        EnvoyPluginStoragePipelineMock.uniqueStringValues.clear();
        EnvoyPluginStoragePipelineMock.uniqueNumberKeys.clear();
        EnvoyPluginStoragePipelineMock.uniqueNumberValues.clear();
    };
    EnvoyPluginStoragePipelineMock.makeUniqueString = function (chars, size) {
        var result = '';
        // eslint-disable-next-line no-plusplus
        for (var i = 0; i < size; i++) {
            result += chars.charAt(Math.floor(Math.random() * chars.length));
        }
        return result;
    };
    EnvoyPluginStoragePipelineMock.makeUniqueNumber = function (min, max) {
        return Math.random() * (max - min) + min;
    };
    EnvoyPluginStoragePipelineMock.storage = {};
    EnvoyPluginStoragePipelineMock.uniqueStringKeys = new Set();
    EnvoyPluginStoragePipelineMock.uniqueStringValues = new Set();
    EnvoyPluginStoragePipelineMock.uniqueNumberKeys = new Set();
    EnvoyPluginStoragePipelineMock.uniqueNumberValues = new Set();
    return EnvoyPluginStoragePipelineMock;
}(EnvoyPluginStoragePipeline_1.default));
exports.default = EnvoyPluginStoragePipelineMock;
