"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var qs_1 = __importDefault(require("qs"));
var dataloader_1 = __importDefault(require("dataloader"));
var constants_1 = require("../constants");
var axiosConstructor_1 = require("../util/axiosConstructor");
/**
 * Sometimes envoy-web will give us back some relationship data
 * with the "type" set to the relationships name instead of the actual model's name.
 * This mapping allows us to alias those cases.
 */
var TYPE_ALIASES = new Map([
    ['employee-screening-flows', 'flows'],
]);
/**
 * Make typed API calls to Envoy.
 * Uses a data loader to leverage JSONAPI's "include" functionality.
 * This allows us to save everything that was included in the initial response
 * to be used later without re-fetching from the API.
 *
 * @category Base
 */
var EnvoyAPI = /** @class */ (function () {
    function EnvoyAPI(accessToken) {
        var _this = this;
        /**
         * HTTP Client with Envoy's defaults.
         */
        this.axios = axiosConstructor_1.createAxiosClient({
            baseURL: constants_1.envoyBaseURL,
            headers: {
                'Content-Type': 'application/vnd.api+json',
                Accept: 'application/vnd.api+json',
            },
            paramsSerializer: function (params) { return qs_1.default.stringify(params, {
                arrayFormat: 'brackets',
                encode: false,
            }); },
        });
        /**
         * A dataloader: https://github.com/graphql/dataloader
         * Will fetch individual resources from the API,
         * unless they exist in cache (which they usually will).
         */
        this.dataLoader = new dataloader_1.default(function (keys) { return Promise.all(keys.map(function (_a) {
            var type = _a.type, id = _a.id, include = _a.include;
            return __awaiter(_this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, this.axios.get("api/v3/" + type + "/" + id, { params: { include: include } })];
                        case 1:
                            data = (_b.sent()).data;
                            return [2 /*return*/, data.data];
                    }
                });
            });
        })); }, {
            cacheKeyFn: function (key) { return key.type + "_" + key.id; },
        });
        this.axios.defaults.headers.authorization = "Bearer " + accessToken;
        /**
         * Saves every model that was "include"ed in the response,
         * which saves us the trouble of fetching related data.
         */
        this.axios.interceptors.response.use(function (response) {
            var _a = response.data, modelOrModels = _a.data, included = _a.included;
            (included || [])
                .concat(modelOrModels)
                .forEach(function (model) {
                _this.dataLoader.prime({ type: model.type, id: model.id }, model);
                var alias = TYPE_ALIASES.get(model.type);
                if (alias) {
                    _this.dataLoader.prime({ type: alias, id: model.id }, model);
                }
            });
            return response;
        }, function (error) { return Promise.reject(error); });
    }
    return EnvoyAPI;
}());
exports.default = EnvoyAPI;
