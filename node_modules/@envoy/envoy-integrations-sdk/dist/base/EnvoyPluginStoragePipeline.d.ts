import EnvoyStorageCommand, { EnvoyStorageSetUniqueNumOptions, EnvoyStorageSetUniqueOptions } from '../internal/EnvoyStorageCommand';
import EnvoyStorageResult from '../internal/EnvoyStorageResult';
import EnvoyPluginAPI from '../sdk/EnvoyPluginAPI';
/**
 * Builds up a request pipeline for submitting storage commands.
 *
 * @category Base
 */
export default class EnvoyPluginStoragePipeline {
    protected readonly api: EnvoyPluginAPI;
    readonly installId: string | undefined;
    protected readonly commands: Array<EnvoyStorageCommand>;
    constructor(pluginAPI: EnvoyPluginAPI, installId?: string);
    /**
     * Executes all the commands in the pipeline.
     */
    execute<Result extends EnvoyStorageResult = EnvoyStorageResult>(): Promise<Array<Result>>;
    /**
     * Executes the pipeline and returns the first result.
     */
    executeSingle<Result extends EnvoyStorageResult = EnvoyStorageResult>(): Promise<Result>;
    addCommand(command: EnvoyStorageCommand): EnvoyPluginStoragePipeline;
    /**
     * Gets a storage item.
     */
    get(key: string): EnvoyPluginStoragePipeline;
    /**
     * Sets a value for a storage item,
     * and returns that item.
     */
    set(key: string, value: unknown): EnvoyPluginStoragePipeline;
    /**
     * Sets a unique value for a storage item,
     * and returns that item.
     */
    setUnique(key: string, options?: EnvoyStorageSetUniqueOptions): EnvoyPluginStoragePipeline;
    /**
     * Sets a unique number value for a storage item,
     * and returns that item.
     */
    setUniqueNum(key: string, options?: EnvoyStorageSetUniqueNumOptions): EnvoyPluginStoragePipeline;
    /**
     * Unsets a storage item.
     */
    unset(key: string): EnvoyPluginStoragePipeline;
    /**
     * Lists storage items.
     */
    list(page?: number): EnvoyPluginStoragePipeline;
}
//# sourceMappingURL=EnvoyPluginStoragePipeline.d.ts.map