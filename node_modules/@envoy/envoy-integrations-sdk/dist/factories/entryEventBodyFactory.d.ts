import { Sync } from 'factory.ts';
import EntryPayload from '../payloads/EntryPayload';
import EnvoyEntryEvent from '../internal/EnvoyEntryEvent';
import { EnvoyUserAPIScope } from '../sdk/EnvoyUserAPI';
export declare type EntryPayloadFactoryVisitorOptions = {
    isProtectFlow: false;
    isSignedIn: boolean;
    hasEmail: boolean;
    hasHost: boolean;
    hasInvite: boolean;
    hasDevice: boolean;
    hasPhoneNumber?: boolean;
    hasPhoto?: boolean;
};
export declare type EntryPayloadFactoryProtectOptions = {
    isProtectFlow: true;
    isSignedIn: boolean;
    hasPhoneNumber?: boolean;
    hasPhoto?: boolean;
};
export declare type EntryPayloadFactoryOptions = EntryPayloadFactoryVisitorOptions | EntryPayloadFactoryProtectOptions;
export declare const entryEventBodyFactoryDefaultIds: {
    location: string;
    company: string;
    flow: string;
    invite: string;
    device: string;
    employee: string;
};
export declare function entryPayloadFactory(options: EntryPayloadFactoryOptions, ids?: Partial<typeof entryEventBodyFactoryDefaultIds>): Sync.Factory<EntryPayload>;
export declare type EntryEventBodyFactoryOptions<Config extends Record<string, unknown> = Record<string, never>> = {
    event: EnvoyEntryEvent;
    config: Partial<Config>;
    payloadOptions: EntryPayloadFactoryOptions;
    scope?: Array<EnvoyUserAPIScope>;
    ids?: Partial<typeof entryEventBodyFactoryDefaultIds>;
};
export default function entryEventBodyFactory<Config extends Record<string, unknown> = Record<string, never>>(options: EntryEventBodyFactoryOptions<Config>): {
    meta: import("..").EnvoyEventMeta<string, Record<string, unknown>>;
    payload: EntryPayload;
};
//# sourceMappingURL=entryEventBodyFactory.d.ts.map