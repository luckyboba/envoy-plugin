import { Sync } from 'factory.ts';
import InvitePayload from '../payloads/InvitePayload';
import EnvoyInviteEvent from '../internal/EnvoyInviteEvent';
import { EnvoyUserAPIScope } from '../sdk/EnvoyUserAPI';
export declare type InvitePayloadFactoryVisitorOptions = {
    isProtectFlow: false;
    hasEmail: boolean;
    hasHost: boolean;
    preregistrationComplete: boolean;
    hasPhoto?: boolean;
};
export declare type InvitePayloadFactoryProtectOptions = {
    isProtectFlow: true;
    preregistrationComplete: boolean;
    hasPhoto?: boolean;
};
export declare type InvitePayloadFactoryOptions = InvitePayloadFactoryVisitorOptions | InvitePayloadFactoryProtectOptions;
export declare const inviteEventBodyFactoryDefaultIds: {
    location: string;
    company: string;
    flow: string;
    invite: string;
    device: string;
    employee: string;
};
export declare function invitePayloadFactory(options: InvitePayloadFactoryOptions, ids?: Partial<typeof inviteEventBodyFactoryDefaultIds>): Sync.Factory<InvitePayload>;
export declare type InviteEventBodyFactoryOptions<Config extends Record<string, unknown> = Record<string, never>> = {
    event: EnvoyInviteEvent;
    config: Partial<Config>;
    payloadOptions: InvitePayloadFactoryOptions;
    scope?: Array<EnvoyUserAPIScope>;
    ids?: Partial<typeof inviteEventBodyFactoryDefaultIds>;
};
export default function entryEventBodyFactory<Config extends Record<string, unknown> = Record<string, never>>(options: InviteEventBodyFactoryOptions<Config>): {
    meta: import("..").EnvoyEventMeta<string, Record<string, unknown>>;
    payload: InvitePayload;
};
//# sourceMappingURL=inviteEventBodyFactory.d.ts.map