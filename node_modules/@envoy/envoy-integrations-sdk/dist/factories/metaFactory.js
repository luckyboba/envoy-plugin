"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.eventMetaFactory = exports.routeMetaFactory = exports.authFactory = exports.zoneFactory = exports.companyFactory = exports.locationFactory = exports.jobFactory = void 0;
var factory_ts_1 = require("factory.ts");
var faker_1 = __importDefault(require("faker"));
function jobFactory(name) {
    return factory_ts_1.Sync.makeFactory({
        id: faker_1.default.datatype.uuid(),
        identifier: faker_1.default.datatype.string(),
        name: name,
    });
}
exports.jobFactory = jobFactory;
function locationFactory(id) {
    var cityName = faker_1.default.address.cityName();
    var street = faker_1.default.address.streetAddress();
    return factory_ts_1.Sync.makeFactory({
        id: id,
        type: 'locations',
        attributes: {
            name: cityName,
            'company-name-override': null,
            timezone: faker_1.default.address.timeZone(),
            locale: null,
            address: street,
            'address-line-one': street,
            'address-line-two': null,
            city: cityName,
            state: faker_1.default.address.stateAbbr(),
            country: faker_1.default.address.country(),
            zip: faker_1.default.address.zipCode(),
            longitude: null,
            latitude: null,
            'created-at': faker_1.default.date.past().toISOString(),
        },
    });
}
exports.locationFactory = locationFactory;
function companyFactory(id) {
    return factory_ts_1.Sync.makeFactory({
        id: id,
        type: 'companies',
        attributes: {
            name: faker_1.default.company.companyName(),
            active: true,
            'created-at': faker_1.default.date.past().toISOString(),
        },
    });
}
exports.companyFactory = companyFactory;
function zoneFactory(id) {
    var street = faker_1.default.address.streetAddress();
    return factory_ts_1.Sync.makeFactory({
        id: id,
        type: 'zones',
        attributes: {
            address: street,
            'logo-url': null,
            name: faker_1.default.company.companyName(),
            'time-zone': faker_1.default.address.timeZone(),
        },
    });
}
exports.zoneFactory = zoneFactory;
function authFactory() {
    return factory_ts_1.Sync.makeFactory({
        token_type: 'Bearer',
        access_token: faker_1.default.random.alphaNumeric(),
        expires_in: faker_1.default.date.future().getSeconds(),
        refresh_token: null,
        refresh_token_expires_in: null,
    });
}
exports.authFactory = authFactory;
function routeMetaFactory(route, config, params, scope, locationId, companyId, zoneId) {
    return factory_ts_1.Sync.makeFactory({
        plugin_id: faker_1.default.datatype.uuid(),
        install_id: Math.ceil(Math.abs(faker_1.default.datatype.number())).toString(),
        location: locationFactory(locationId).build(),
        company: companyFactory(companyId).build(),
        zone: zoneFactory(zoneId).build(),
        auth: scope.length ? authFactory().build() : null,
        forwarded_bearer_token: faker_1.default.random.alphaNumeric(),
        route: route,
        config: config,
        params: params,
    });
}
exports.routeMetaFactory = routeMetaFactory;
function eventMetaFactory(event, config, scope, locationId, companyId, zoneId) {
    return factory_ts_1.Sync.makeFactory({
        plugin_id: faker_1.default.datatype.uuid(),
        install_id: Math.ceil(Math.abs(faker_1.default.datatype.number())).toString(),
        job: jobFactory(event).build(),
        location: locationFactory(locationId).build(),
        company: companyFactory(companyId).build(),
        zone: zoneFactory(zoneId).build(),
        auth: scope.length ? authFactory().build() : null,
        event: event,
        config: config,
    });
}
exports.eventMetaFactory = eventMetaFactory;
