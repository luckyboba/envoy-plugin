"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.invitePayloadFactory = exports.inviteEventBodyFactoryDefaultIds = void 0;
var factory_ts_1 = require("factory.ts");
var faker_1 = __importDefault(require("faker"));
var eventBodyFactory_1 = __importDefault(require("./eventBodyFactory"));
exports.inviteEventBodyFactoryDefaultIds = {
    location: '1',
    company: '1',
    flow: '1',
    invite: '1',
    device: '1',
    employee: '1',
};
function invitePayloadFactory(options, ids) {
    if (ids === void 0) { ids = exports.inviteEventBodyFactoryDefaultIds; }
    var signedInDate = faker_1.default.date.past();
    var allIds = __assign(__assign({}, exports.inviteEventBodyFactoryDefaultIds), ids);
    return factory_ts_1.Sync.makeFactory({
        id: factory_ts_1.each(function (i) { return "" + (i + 1); }),
        type: 'invites',
        attributes: {
            'employee-screening-flow': options.isProtectFlow,
            'full-name': faker_1.default.name.findName(),
            email: (options.isProtectFlow || options.hasEmail) ? faker_1.default.internet.email() : null,
            'inviter-name': (!options.isProtectFlow && options.hasHost) ? faker_1.default.name.findName() : null,
            'inviter-email': (!options.isProtectFlow && options.hasHost) ? faker_1.default.internet.email() : null,
            'expected-arrival-time': faker_1.default.date.future().toISOString(),
            'private-notes': null,
            arrived: false,
            'been-here-before': false,
            'flow-name': options.isProtectFlow ? 'Employee registration' : 'Visitor',
            'flow-id': allIds.flow,
            'user-data': [],
            'secret-token': faker_1.default.random.alphaNumeric(10),
            'edit-token': faker_1.default.random.alphaNumeric(10),
            'photo-url': faker_1.default.image.avatar(),
            'qr-code': null,
            'qr-code-sent-at': null,
            'preregistration-complete': options.preregistrationComplete,
            'reminder-sent-at': null,
        },
        relationships: {
            location: {
                data: {
                    id: allIds.location,
                    type: 'locations',
                },
            },
            flow: {
                data: {
                    id: allIds.flow,
                    type: 'flows',
                },
            },
            employee: (options.isProtectFlow || options.hasHost) ? {
                data: {
                    id: allIds.employee,
                    type: 'employees',
                },
            } : undefined,
        },
    });
}
exports.invitePayloadFactory = invitePayloadFactory;
function entryEventBodyFactory(options) {
    var _a, _b;
    var ids = options.ids || exports.inviteEventBodyFactoryDefaultIds;
    return eventBodyFactory_1.default({
        event: options.event,
        config: options.config,
        scope: options.scope || [],
        locationId: ((_a = options.ids) === null || _a === void 0 ? void 0 : _a.location) || exports.inviteEventBodyFactoryDefaultIds.location,
        companyId: ((_b = options.ids) === null || _b === void 0 ? void 0 : _b.company) || exports.inviteEventBodyFactoryDefaultIds.company,
        payload: invitePayloadFactory(options.payloadOptions, ids).build(),
    });
}
exports.default = entryEventBodyFactory;
